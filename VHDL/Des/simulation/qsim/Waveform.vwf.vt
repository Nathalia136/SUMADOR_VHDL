// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/24/2025 20:41:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Des
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Des_vlg_sample_tst(
	Cin,
	Cout,
	off,
	Sum,
	sampler_tx
);
input  Cin;
input  Cout;
input  off;
input [3:0] Sum;
output sampler_tx;

reg sample;
time current_time;
always @(Cin or Cout or off or Sum)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Des_vlg_check_tst (
	Decenas,
	Unidades,
	sampler_rx
);
input [3:0] Decenas;
input [3:0] Unidades;
input sampler_rx;

reg [3:0] Decenas_expected;
reg [3:0] Unidades_expected;

reg [3:0] Decenas_prev;
reg [3:0] Unidades_prev;

reg [3:0] Decenas_expected_prev;
reg [3:0] Unidades_expected_prev;

reg [3:0] last_Decenas_exp;
reg [3:0] last_Unidades_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Decenas_prev = Decenas;
	Unidades_prev = Unidades;
end

// update expected /o prevs

always @(trigger)
begin
	Decenas_expected_prev = Decenas_expected;
	Unidades_expected_prev = Unidades_expected;
end


// expected Unidades[ 3 ]
initial
begin
	Unidades_expected[3] = 1'bX;
end 
// expected Unidades[ 2 ]
initial
begin
	Unidades_expected[2] = 1'bX;
end 
// expected Unidades[ 1 ]
initial
begin
	Unidades_expected[1] = 1'bX;
end 
// expected Unidades[ 0 ]
initial
begin
	Unidades_expected[0] = 1'bX;
end 
// expected Decenas[ 3 ]
initial
begin
	Decenas_expected[3] = 1'bX;
end 
// expected Decenas[ 2 ]
initial
begin
	Decenas_expected[2] = 1'bX;
end 
// expected Decenas[ 1 ]
initial
begin
	Decenas_expected[1] = 1'bX;
end 
// expected Decenas[ 0 ]
initial
begin
	Decenas_expected[0] = 1'bX;
end 
// generate trigger
always @(Decenas_expected or Decenas or Unidades_expected or Unidades)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Decenas = %b | expected Unidades = %b | ",Decenas_expected_prev,Unidades_expected_prev);
	$display("| real Decenas = %b | real Unidades = %b | ",Decenas_prev,Unidades_prev);
`endif
	if (
		( Decenas_expected_prev[0] !== 1'bx ) && ( Decenas_prev[0] !== Decenas_expected_prev[0] )
		&& ((Decenas_expected_prev[0] !== last_Decenas_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decenas[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decenas_expected_prev);
		$display ("     Real value = %b", Decenas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decenas_exp[0] = Decenas_expected_prev[0];
	end
	if (
		( Decenas_expected_prev[1] !== 1'bx ) && ( Decenas_prev[1] !== Decenas_expected_prev[1] )
		&& ((Decenas_expected_prev[1] !== last_Decenas_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decenas[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decenas_expected_prev);
		$display ("     Real value = %b", Decenas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decenas_exp[1] = Decenas_expected_prev[1];
	end
	if (
		( Decenas_expected_prev[2] !== 1'bx ) && ( Decenas_prev[2] !== Decenas_expected_prev[2] )
		&& ((Decenas_expected_prev[2] !== last_Decenas_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decenas[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decenas_expected_prev);
		$display ("     Real value = %b", Decenas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decenas_exp[2] = Decenas_expected_prev[2];
	end
	if (
		( Decenas_expected_prev[3] !== 1'bx ) && ( Decenas_prev[3] !== Decenas_expected_prev[3] )
		&& ((Decenas_expected_prev[3] !== last_Decenas_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Decenas[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Decenas_expected_prev);
		$display ("     Real value = %b", Decenas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Decenas_exp[3] = Decenas_expected_prev[3];
	end
	if (
		( Unidades_expected_prev[0] !== 1'bx ) && ( Unidades_prev[0] !== Unidades_expected_prev[0] )
		&& ((Unidades_expected_prev[0] !== last_Unidades_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Unidades[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Unidades_expected_prev);
		$display ("     Real value = %b", Unidades_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Unidades_exp[0] = Unidades_expected_prev[0];
	end
	if (
		( Unidades_expected_prev[1] !== 1'bx ) && ( Unidades_prev[1] !== Unidades_expected_prev[1] )
		&& ((Unidades_expected_prev[1] !== last_Unidades_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Unidades[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Unidades_expected_prev);
		$display ("     Real value = %b", Unidades_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Unidades_exp[1] = Unidades_expected_prev[1];
	end
	if (
		( Unidades_expected_prev[2] !== 1'bx ) && ( Unidades_prev[2] !== Unidades_expected_prev[2] )
		&& ((Unidades_expected_prev[2] !== last_Unidades_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Unidades[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Unidades_expected_prev);
		$display ("     Real value = %b", Unidades_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Unidades_exp[2] = Unidades_expected_prev[2];
	end
	if (
		( Unidades_expected_prev[3] !== 1'bx ) && ( Unidades_prev[3] !== Unidades_expected_prev[3] )
		&& ((Unidades_expected_prev[3] !== last_Unidades_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Unidades[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Unidades_expected_prev);
		$display ("     Real value = %b", Unidades_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Unidades_exp[3] = Unidades_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Des_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Cin;
reg Cout;
reg off;
reg [3:0] Sum;
// wires                                               
wire [3:0] Decenas;
wire [3:0] Unidades;

wire sampler;                             

// assign statements (if any)                          
Des i1 (
// port map - connection between master ports and signals/registers   
	.Cin(Cin),
	.Cout(Cout),
	.Decenas(Decenas),
	.off(off),
	.Sum(Sum),
	.Unidades(Unidades)
);

// Cin
initial
begin
	Cin = 1'b0;
end 

// Cout
initial
begin
	Cout = 1'b0;
end 

// off
initial
begin
	off = 1'b0;
end 
// Sum[ 3 ]
initial
begin
	Sum[3] = 1'b1;
end 
// Sum[ 2 ]
initial
begin
	Sum[2] = 1'b1;
end 
// Sum[ 1 ]
initial
begin
	Sum[1] = 1'b0;
end 
// Sum[ 0 ]
initial
begin
	Sum[0] = 1'b0;
end 

Des_vlg_sample_tst tb_sample (
	.Cin(Cin),
	.Cout(Cout),
	.off(off),
	.Sum(Sum),
	.sampler_tx(sampler)
);

Des_vlg_check_tst tb_out(
	.Decenas(Decenas),
	.Unidades(Unidades),
	.sampler_rx(sampler)
);
endmodule

