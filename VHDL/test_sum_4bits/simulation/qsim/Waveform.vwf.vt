// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/24/2025 20:51:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test_sum_4bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_sum_4bits_vlg_sample_tst(
	A,
	B,
	Cin,
	sampler_tx
);
input [3:0] A;
input [3:0] B;
input  Cin;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Cin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module test_sum_4bits_vlg_check_tst (
	display0,
	display1,
	display2,
	display3,
	sampler_rx
);
input [6:0] display0;
input [6:0] display1;
input [6:0] display2;
input [6:0] display3;
input sampler_rx;

reg [6:0] display0_expected;
reg [6:0] display1_expected;
reg [6:0] display2_expected;
reg [6:0] display3_expected;

reg [6:0] display0_prev;
reg [6:0] display1_prev;
reg [6:0] display2_prev;
reg [6:0] display3_prev;

reg [6:0] display0_expected_prev;
reg [6:0] display1_expected_prev;
reg [6:0] display2_expected_prev;
reg [6:0] display3_expected_prev;

reg [6:0] last_display0_exp;
reg [6:0] last_display1_exp;
reg [6:0] last_display2_exp;
reg [6:0] last_display3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	display0_prev = display0;
	display1_prev = display1;
	display2_prev = display2;
	display3_prev = display3;
end

// update expected /o prevs

always @(trigger)
begin
	display0_expected_prev = display0_expected;
	display1_expected_prev = display1_expected;
	display2_expected_prev = display2_expected;
	display3_expected_prev = display3_expected;
end


// expected display0[ 6 ]
initial
begin
	display0_expected[6] = 1'bX;
end 
// expected display0[ 5 ]
initial
begin
	display0_expected[5] = 1'bX;
end 
// expected display0[ 4 ]
initial
begin
	display0_expected[4] = 1'bX;
end 
// expected display0[ 3 ]
initial
begin
	display0_expected[3] = 1'bX;
end 
// expected display0[ 2 ]
initial
begin
	display0_expected[2] = 1'bX;
end 
// expected display0[ 1 ]
initial
begin
	display0_expected[1] = 1'bX;
end 
// expected display0[ 0 ]
initial
begin
	display0_expected[0] = 1'bX;
end 
// expected display1[ 6 ]
initial
begin
	display1_expected[6] = 1'bX;
end 
// expected display1[ 5 ]
initial
begin
	display1_expected[5] = 1'bX;
end 
// expected display1[ 4 ]
initial
begin
	display1_expected[4] = 1'bX;
end 
// expected display1[ 3 ]
initial
begin
	display1_expected[3] = 1'bX;
end 
// expected display1[ 2 ]
initial
begin
	display1_expected[2] = 1'bX;
end 
// expected display1[ 1 ]
initial
begin
	display1_expected[1] = 1'bX;
end 
// expected display1[ 0 ]
initial
begin
	display1_expected[0] = 1'bX;
end 
// expected display2[ 6 ]
initial
begin
	display2_expected[6] = 1'bX;
end 
// expected display2[ 5 ]
initial
begin
	display2_expected[5] = 1'bX;
end 
// expected display2[ 4 ]
initial
begin
	display2_expected[4] = 1'bX;
end 
// expected display2[ 3 ]
initial
begin
	display2_expected[3] = 1'bX;
end 
// expected display2[ 2 ]
initial
begin
	display2_expected[2] = 1'bX;
end 
// expected display2[ 1 ]
initial
begin
	display2_expected[1] = 1'bX;
end 
// expected display2[ 0 ]
initial
begin
	display2_expected[0] = 1'bX;
end 
// expected display3[ 6 ]
initial
begin
	display3_expected[6] = 1'bX;
end 
// expected display3[ 5 ]
initial
begin
	display3_expected[5] = 1'bX;
end 
// expected display3[ 4 ]
initial
begin
	display3_expected[4] = 1'bX;
end 
// expected display3[ 3 ]
initial
begin
	display3_expected[3] = 1'bX;
end 
// expected display3[ 2 ]
initial
begin
	display3_expected[2] = 1'bX;
end 
// expected display3[ 1 ]
initial
begin
	display3_expected[1] = 1'bX;
end 
// expected display3[ 0 ]
initial
begin
	display3_expected[0] = 1'bX;
end 
// generate trigger
always @(display0_expected or display0 or display1_expected or display1 or display2_expected or display2 or display3_expected or display3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected display0 = %b | expected display1 = %b | expected display2 = %b | expected display3 = %b | ",display0_expected_prev,display1_expected_prev,display2_expected_prev,display3_expected_prev);
	$display("| real display0 = %b | real display1 = %b | real display2 = %b | real display3 = %b | ",display0_prev,display1_prev,display2_prev,display3_prev);
`endif
	if (
		( display0_expected_prev[0] !== 1'bx ) && ( display0_prev[0] !== display0_expected_prev[0] )
		&& ((display0_expected_prev[0] !== last_display0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display0_exp[0] = display0_expected_prev[0];
	end
	if (
		( display0_expected_prev[1] !== 1'bx ) && ( display0_prev[1] !== display0_expected_prev[1] )
		&& ((display0_expected_prev[1] !== last_display0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display0_exp[1] = display0_expected_prev[1];
	end
	if (
		( display0_expected_prev[2] !== 1'bx ) && ( display0_prev[2] !== display0_expected_prev[2] )
		&& ((display0_expected_prev[2] !== last_display0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display0_exp[2] = display0_expected_prev[2];
	end
	if (
		( display0_expected_prev[3] !== 1'bx ) && ( display0_prev[3] !== display0_expected_prev[3] )
		&& ((display0_expected_prev[3] !== last_display0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display0_exp[3] = display0_expected_prev[3];
	end
	if (
		( display0_expected_prev[4] !== 1'bx ) && ( display0_prev[4] !== display0_expected_prev[4] )
		&& ((display0_expected_prev[4] !== last_display0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display0_exp[4] = display0_expected_prev[4];
	end
	if (
		( display0_expected_prev[5] !== 1'bx ) && ( display0_prev[5] !== display0_expected_prev[5] )
		&& ((display0_expected_prev[5] !== last_display0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display0_exp[5] = display0_expected_prev[5];
	end
	if (
		( display0_expected_prev[6] !== 1'bx ) && ( display0_prev[6] !== display0_expected_prev[6] )
		&& ((display0_expected_prev[6] !== last_display0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display0_exp[6] = display0_expected_prev[6];
	end
	if (
		( display1_expected_prev[0] !== 1'bx ) && ( display1_prev[0] !== display1_expected_prev[0] )
		&& ((display1_expected_prev[0] !== last_display1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[0] = display1_expected_prev[0];
	end
	if (
		( display1_expected_prev[1] !== 1'bx ) && ( display1_prev[1] !== display1_expected_prev[1] )
		&& ((display1_expected_prev[1] !== last_display1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[1] = display1_expected_prev[1];
	end
	if (
		( display1_expected_prev[2] !== 1'bx ) && ( display1_prev[2] !== display1_expected_prev[2] )
		&& ((display1_expected_prev[2] !== last_display1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[2] = display1_expected_prev[2];
	end
	if (
		( display1_expected_prev[3] !== 1'bx ) && ( display1_prev[3] !== display1_expected_prev[3] )
		&& ((display1_expected_prev[3] !== last_display1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[3] = display1_expected_prev[3];
	end
	if (
		( display1_expected_prev[4] !== 1'bx ) && ( display1_prev[4] !== display1_expected_prev[4] )
		&& ((display1_expected_prev[4] !== last_display1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[4] = display1_expected_prev[4];
	end
	if (
		( display1_expected_prev[5] !== 1'bx ) && ( display1_prev[5] !== display1_expected_prev[5] )
		&& ((display1_expected_prev[5] !== last_display1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[5] = display1_expected_prev[5];
	end
	if (
		( display1_expected_prev[6] !== 1'bx ) && ( display1_prev[6] !== display1_expected_prev[6] )
		&& ((display1_expected_prev[6] !== last_display1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display1_exp[6] = display1_expected_prev[6];
	end
	if (
		( display2_expected_prev[0] !== 1'bx ) && ( display2_prev[0] !== display2_expected_prev[0] )
		&& ((display2_expected_prev[0] !== last_display2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[0] = display2_expected_prev[0];
	end
	if (
		( display2_expected_prev[1] !== 1'bx ) && ( display2_prev[1] !== display2_expected_prev[1] )
		&& ((display2_expected_prev[1] !== last_display2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[1] = display2_expected_prev[1];
	end
	if (
		( display2_expected_prev[2] !== 1'bx ) && ( display2_prev[2] !== display2_expected_prev[2] )
		&& ((display2_expected_prev[2] !== last_display2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[2] = display2_expected_prev[2];
	end
	if (
		( display2_expected_prev[3] !== 1'bx ) && ( display2_prev[3] !== display2_expected_prev[3] )
		&& ((display2_expected_prev[3] !== last_display2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[3] = display2_expected_prev[3];
	end
	if (
		( display2_expected_prev[4] !== 1'bx ) && ( display2_prev[4] !== display2_expected_prev[4] )
		&& ((display2_expected_prev[4] !== last_display2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[4] = display2_expected_prev[4];
	end
	if (
		( display2_expected_prev[5] !== 1'bx ) && ( display2_prev[5] !== display2_expected_prev[5] )
		&& ((display2_expected_prev[5] !== last_display2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[5] = display2_expected_prev[5];
	end
	if (
		( display2_expected_prev[6] !== 1'bx ) && ( display2_prev[6] !== display2_expected_prev[6] )
		&& ((display2_expected_prev[6] !== last_display2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display2_expected_prev);
		$display ("     Real value = %b", display2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_display2_exp[6] = display2_expected_prev[6];
	end
	if (
		( display3_expected_prev[0] !== 1'bx ) && ( display3_prev[0] !== display3_expected_prev[0] )
		&& ((display3_expected_prev[0] !== last_display3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[0] = display3_expected_prev[0];
	end
	if (
		( display3_expected_prev[1] !== 1'bx ) && ( display3_prev[1] !== display3_expected_prev[1] )
		&& ((display3_expected_prev[1] !== last_display3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[1] = display3_expected_prev[1];
	end
	if (
		( display3_expected_prev[2] !== 1'bx ) && ( display3_prev[2] !== display3_expected_prev[2] )
		&& ((display3_expected_prev[2] !== last_display3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[2] = display3_expected_prev[2];
	end
	if (
		( display3_expected_prev[3] !== 1'bx ) && ( display3_prev[3] !== display3_expected_prev[3] )
		&& ((display3_expected_prev[3] !== last_display3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[3] = display3_expected_prev[3];
	end
	if (
		( display3_expected_prev[4] !== 1'bx ) && ( display3_prev[4] !== display3_expected_prev[4] )
		&& ((display3_expected_prev[4] !== last_display3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[4] = display3_expected_prev[4];
	end
	if (
		( display3_expected_prev[5] !== 1'bx ) && ( display3_prev[5] !== display3_expected_prev[5] )
		&& ((display3_expected_prev[5] !== last_display3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[5] = display3_expected_prev[5];
	end
	if (
		( display3_expected_prev[6] !== 1'bx ) && ( display3_prev[6] !== display3_expected_prev[6] )
		&& ((display3_expected_prev[6] !== last_display3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display3_expected_prev);
		$display ("     Real value = %b", display3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_display3_exp[6] = display3_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module test_sum_4bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg Cin;
// wires                                               
wire [6:0] display0;
wire [6:0] display1;
wire [6:0] display2;
wire [6:0] display3;

wire sampler;                             

// assign statements (if any)                          
test_sum_4bits i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Cin(Cin),
	.display0(display0),
	.display1(display1),
	.display2(display2),
	.display3(display3)
);
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// Cin
initial
begin
	Cin = 1'b0;
end 

test_sum_4bits_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Cin(Cin),
	.sampler_tx(sampler)
);

test_sum_4bits_vlg_check_tst tb_out(
	.display0(display0),
	.display1(display1),
	.display2(display2),
	.display3(display3),
	.sampler_rx(sampler)
);
endmodule

